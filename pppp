#include <iostream>
#include <cstring>
all lop padil, semoga padil lop all
using namespace std;

char word[23][23]={ {'A','A','F','L','K','H','P','F','S','S','U','F','I','C','I','C','L','E','S','G','N','N','H'},
                    {'S','F','V','R','E','O','M','R','W','L','R','T','T','S','X','O','Q','Q','N','A','O','A','O'},
                    {'Q','E','I','A','I','F','X','A','E','I','R','F','V','F','Y','S','X','I','M','I','N','J','I'},
                    {'W','S','T','R','L','G','O','C','A','P','B','I','A','F','I','W','I','W','T','U','A','C','M'},
                    {'F','E','Y','A','E','A','I','S','T','P','C','R','L','U','J','K','O','A','K','C','E','R','S'},
                    {'R','V','D','A',''K,'P','N','D','E','E','H','D','E','M','S','N','C','K','K','F','O','A','H'},
                    {'M','R','N','E','D','S','L','C','R','R','I','W','N','R','S','A','A','F','I','T','M','M','I'},
                    {'Y','A','A','E','C','I','E','A','H','Y','M','O','T','A','V','H','R','S','S','T','I','S','B'},
                    {'R','J','S','E','W','E','L','C','C','E','N','N','I','E','T','O','H','W','S','G','L','S','E'},
                    {'A','T','A','N','Y','Y','M','O','I','E','E','S','N','E','S','I','O','I','R','E','L','T','R'},
                    {'N','S','N','O','W','B','O','A','R','D','Y','T','V','W','Y','C','L','E','V','O','H','S','A'},
                    {'A','C','O','C','R','Q','L','G','Z','I','Y','C','H','O','D','R','A','Z','Z','I','L','B','I'},
                    {'L','B','V','K','K','W','A','N','Z','A','A','Q','I','N','W','O','L','P','W','O','N','S','L'},
                    {'B','F','R','E','E','Z','I','N','G','R','A','I','N','S','L','I','L','G','T','M','E','L','T'},
                    {'H','Q','P','Y','L','W','H','F','M','N','F','F','U','F','P','S','W','X','N','U','M','M','V'},
                };

void printword();
int diag1(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Diagonal kanan bawah
int diag2(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Diagonal Kiri atas
int diag3(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Diagonal kanan atas
int diag4(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Diagonal Kiri bawah
int ver1(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23); // Vertikal Atas
int ver2(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Vertikal Bawah
int hor1(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Horizontal Kanan
int hor2(int &, int &, int &, int cval, int c2val, int *, char (*kval)[23], char (*wval)[23]); // Horizontal Kiri

int main()
{
    char lagi = 'y';
    do{
            printword();

            // Jumlah kata yang dicari
            int jml;
            cout << endl << endl;
            cout << "\tJumlah kata yang ingin dicari ? ";
            cin >> jml;
            char kata[jml][23]; int pnjgkata[jml];
            cin.ignore();
            // Input kata
            for(int i=0;i<jml;i++){
                cout << i+1 << ". ";
                cin.getline(kata[i], 23);
                pnjgkata[i]=strlen(kata[i]);    //Menghitung jumlah huruf pada kata
            }
            // ToUpper
            for(int i=0;i<jml;i++){
                for(int j=0;j<pnjgkata[i];j++){
                    if((int)kata[i][j] < 97 || (int)kata[i][j] > 122)
                        continue;
                    else
                        kata[i][j] = (char)((int)kata[i][j] - 32);
                }
            }
            // Mencari Kata
            int cek=0,cek2=0;
            for(int x=0;x<jml;x++){
                for(int i=0;i<23;i++){
                    for(int j=0;j<23;j++){
                        if(kata[x][0]==word[i][j]){
                            cek2 = dkb(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = dKa(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = dka(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = dKb(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = va(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = vb(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = hk(x, i, j, cek, cek2, pnjgkata, kata, word);
                            cek2 = hK(x, i, j, cek, cek2, pnjgkata, kata, word);
                        }
                    }
                }
            // OUTPUT
            if(x==0){
                cout << endl << "===================" << endl;
                cout << "||    RESULT :   ||" << endl;
                cout << "===================" << endl << endl;
            }
            cout << x+1 << ". ";
            if(cek2>0){
                cout << " Ada !";
                cek2 = 0;
            }else
                cout << " Tidak ada !";
                cout << endl;
            }
            cout << endl << "Ingin mencoba lagi ?(y/n) ";cin>>lagi;
    }while(lagi == 'y');
	cin.get();
	return 0;

}

void printword(){
	cout<<"==========================================================="<<endl;
	cout<<"DAFTAR ANGGOTA KELOMPOK : "<<endl;
	cout<<"Nama : 1. Aulia Ahmad Nabil\t (1817051074)"<<endl;
	cout<<"       2. Arbi Hidayatullah\t (1817051045)"<<endl;
	cout<<"       3. Asbiq Al Alawi\t (1817051026)"<<endl;
	cout<<"       4. Pandi Barep Arianza\t (1817051002)"<<endl;
	cout<<"==========================================================="<<endl<<endl;
	cout<<"\t\t      GAME FIND WORD"<<endl;
    for(int i=0;i<15;i++){
        cout << "-----------------------------------------------------------"<<endl;
        for(int j=0;j<15;j++)
            cout << word[i][j] << " | ";
        cout << endl;
        if(i==14)
            cout << "-----------------------------------------------------------";
    }
}
int dkb(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival+k][jval+k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int dKa(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival-k][jval-k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int dka(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival-k][jval+k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int dKb(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival-k][jval+k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int va(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival+k][jval]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int vb(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival-k][jval]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int hk(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival][jval+k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
int hK(int &xval, int &ival, int &jval, int cval, int c2val, int *valpnjg, char (*kval)[23], char (*wval)[23]){
    for(int k=0;k<*(valpnjg+xval);k++){
        if(kval[xval][k]==wval[ival][jval-k]){
            cval=k;
        }else
        break;
    }
    if(cval == (*(valpnjg+xval)-1)) {
        c2val +=1;
    } else {
        c2val +=0;
    }
    return c2val;
}
